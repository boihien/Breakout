
bhuan019_custom_snes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae5  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088b  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fc  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049c  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000268  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	bb d0       	rcall	.+374    	; 0x23a <main>
  c4:	c6 c0       	rjmp	.+396    	; 0x252 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <readSNES>:
#define SNES_L          32   
#define SNES_R          16   

void readSNES()
{
	controllerKey = 0;
  c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <controllerKey+0x1>
  cc:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <controllerKey>
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ef 5f       	subi	r30, 0xFF	; 255
  da:	fe 4f       	sbci	r31, 0xFE	; 254
#define __readSNES_h__
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
  dc:	90 81       	ld	r25, Z
  de:	99 23       	and	r25, r25
  e0:	11 f0       	breq	.+4      	; 0xe6 <readSNES+0x1e>
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <readSNES+0x20>
  e6:	8d 7f       	andi	r24, 0xFD	; 253
#define SNES_R          16   

void readSNES()
{
	controllerKey = 0;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
  e8:	88 b9       	out	0x08, r24	; 8
	PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
  ea:	88 b1       	in	r24, 0x08	; 8
  ec:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ef 5f       	subi	r30, 0xFF	; 255
  f4:	fe 4f       	sbci	r31, 0xFE	; 254
#define __readSNES_h__
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
  f6:	90 81       	ld	r25, Z
  f8:	99 23       	and	r25, r25
  fa:	11 f0       	breq	.+4      	; 0x100 <readSNES+0x38>
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	01 c0       	rjmp	.+2      	; 0x102 <readSNES+0x3a>
 100:	8e 7f       	andi	r24, 0xFE	; 254

void readSNES()
{
	controllerKey = 0;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
	PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
 102:	88 b9       	out	0x08, r24	; 8
	
	latch_cnt = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
 10a:	88 b1       	in	r24, 0x08	; 8
#define __readSNES_h__
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 10c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <ARRAY+0x1>
 110:	99 23       	and	r25, r25
 112:	11 f0       	breq	.+4      	; 0x118 <readSNES+0x50>
 114:	82 60       	ori	r24, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <readSNES+0x52>
 118:	8d 7f       	andi	r24, 0xFD	; 253
	controllerKey = 0;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
	PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
	
	latch_cnt = 1;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
 11a:	88 b9       	out	0x08, r24	; 8
	latch_cnt = 0;
 11c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
 120:	88 b1       	in	r24, 0x08	; 8
#define __readSNES_h__
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <ARRAY>
 126:	99 23       	and	r25, r25
 128:	11 f0       	breq	.+4      	; 0x12e <readSNES+0x66>
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	01 c0       	rjmp	.+2      	; 0x130 <readSNES+0x68>
 12e:	8d 7f       	andi	r24, 0xFD	; 253
	PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
	
	latch_cnt = 1;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
	latch_cnt = 0;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
 130:	88 b9       	out	0x08, r24	; 8
	
	controllerKey = GetBit(~PINC, data);
 132:	86 b1       	in	r24, 0x06	; 6
 134:	80 95       	com	r24
 136:	84 70       	andi	r24, 0x04	; 4
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <controllerKey+0x1>
 13e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <controllerKey>
 142:	3e e0       	ldi	r19, 0x0E	; 14
	
	for (unsigned char i = 0; i < 14; i++) 
	{
		clock_cnt = 0;
		PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
 144:	e1 e0       	ldi	r30, 0x01	; 1
 146:	f1 e0       	ldi	r31, 0x01	; 1
		
		controllerKey <<= 1;
		controllerKey = controllerKey + GetBit(~PINC, data);
		
		clock_cnt = 1;
 148:	41 e0       	ldi	r20, 0x01	; 1
	
	controllerKey = GetBit(~PINC, data);
	
	for (unsigned char i = 0; i < 14; i++) 
	{
		clock_cnt = 0;
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
 14e:	88 b1       	in	r24, 0x08	; 8
#define __readSNES_h__
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 150:	90 81       	ld	r25, Z
 152:	99 23       	and	r25, r25
 154:	11 f0       	breq	.+4      	; 0x15a <readSNES+0x92>
 156:	81 60       	ori	r24, 0x01	; 1
 158:	01 c0       	rjmp	.+2      	; 0x15c <readSNES+0x94>
 15a:	8e 7f       	andi	r24, 0xFE	; 254
	controllerKey = GetBit(~PINC, data);
	
	for (unsigned char i = 0; i < 14; i++) 
	{
		clock_cnt = 0;
		PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
 15c:	88 b9       	out	0x08, r24	; 8
		
		controllerKey <<= 1;
 15e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <controllerKey>
 162:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <controllerKey+0x1>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <controllerKey+0x1>
 16e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <controllerKey>
		controllerKey = controllerKey + GetBit(~PINC, data);
 172:	26 b1       	in	r18, 0x06	; 6
 174:	20 95       	com	r18
 176:	24 70       	andi	r18, 0x04	; 4
 178:	82 0f       	add	r24, r18
 17a:	91 1d       	adc	r25, r1
 17c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <controllerKey+0x1>
 180:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <controllerKey>
		
		clock_cnt = 1;
 184:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
		PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
 188:	88 b1       	in	r24, 0x08	; 8
#define __readSNES_h__
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char SetBit(unsigned char pin, unsigned char number, unsigned char bin_value)
{
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	99 23       	and	r25, r25
 18e:	11 f0       	breq	.+4      	; 0x194 <readSNES+0xcc>
 190:	81 60       	ori	r24, 0x01	; 1
 192:	01 c0       	rjmp	.+2      	; 0x196 <readSNES+0xce>
 194:	8e 7f       	andi	r24, 0xFE	; 254
		
		controllerKey <<= 1;
		controllerKey = controllerKey + GetBit(~PINC, data);
		
		clock_cnt = 1;
		PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
 196:	88 b9       	out	0x08, r24	; 8
 198:	31 50       	subi	r19, 0x01	; 1
	latch_cnt = 0;
	PORTC = SetBit(PORTC,Latch,ARRAY[latch_cnt]);
	
	controllerKey = GetBit(~PINC, data);
	
	for (unsigned char i = 0; i < 14; i++) 
 19a:	b9 f6       	brne	.-82     	; 0x14a <readSNES+0x82>
		controllerKey = controllerKey + GetBit(~PINC, data);
		
		clock_cnt = 1;
		PORTC = SetBit(PORTC,clock,ARRAY[clock_cnt]);
	}
}
 19c:	08 95       	ret

0000019e <tick>:

enum States{start,up, down, left, right}state;
void tick(){
	switch(state){
 19e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	51 f1       	breq	.+84     	; 0x1fa <tick+0x5c>
 1a6:	28 f4       	brcc	.+10     	; 0x1b2 <tick+0x14>
 1a8:	88 23       	and	r24, r24
 1aa:	41 f0       	breq	.+16     	; 0x1bc <tick+0x1e>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	11 f1       	breq	.+68     	; 0x1f4 <tick+0x56>
 1b0:	2d c0       	rjmp	.+90     	; 0x20c <tick+0x6e>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	29 f1       	breq	.+74     	; 0x200 <tick+0x62>
 1b6:	84 30       	cpi	r24, 0x04	; 4
 1b8:	31 f1       	breq	.+76     	; 0x206 <tick+0x68>
 1ba:	28 c0       	rjmp	.+80     	; 0x20c <tick+0x6e>
		case start:
			if(controllerKey & SNES_UP){
 1bc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <controllerKey>
 1c0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <controllerKey+0x1>
 1c4:	93 ff       	sbrs	r25, 3
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <tick+0x32>
				state = up;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1ce:	29 c0       	rjmp	.+82     	; 0x222 <tick+0x84>
			}
			else if(controllerKey & SNES_DOWN){
 1d0:	92 ff       	sbrs	r25, 2
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <tick+0x3e>
				state = down;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1da:	26 c0       	rjmp	.+76     	; 0x228 <tick+0x8a>
			}
			else if(controllerKey & SNES_LEFT){
 1dc:	91 ff       	sbrs	r25, 1
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <tick+0x4a>
				state = left;
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1e6:	23 c0       	rjmp	.+70     	; 0x22e <tick+0x90>
			}
			else if(controllerKey & SNES_RIGHT){
 1e8:	90 ff       	sbrs	r25, 0
 1ea:	26 c0       	rjmp	.+76     	; 0x238 <tick+0x9a>
				state = right;
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1f2:	20 c0       	rjmp	.+64     	; 0x234 <tick+0x96>
			else{
				state = start;
			}
			break;
		case up:
			state = start;
 1f4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
			break;
 1f8:	08 95       	ret
		case down:
			state = start;
 1fa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
			break;
 1fe:	08 95       	ret
		case left:
			state = start;
 200:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
			break;
 204:	08 95       	ret
		case right:
			state = start;
 206:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
			break;	
 20a:	08 95       	ret
	}
	switch(state){
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	61 f0       	breq	.+24     	; 0x228 <tick+0x8a>
 210:	18 f4       	brcc	.+6      	; 0x218 <tick+0x7a>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	31 f0       	breq	.+12     	; 0x222 <tick+0x84>
 216:	08 95       	ret
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	49 f0       	breq	.+18     	; 0x22e <tick+0x90>
 21c:	84 30       	cpi	r24, 0x04	; 4
 21e:	51 f0       	breq	.+20     	; 0x234 <tick+0x96>
 220:	08 95       	ret
		case start:
			break;
		case up:
			PORTD = 0x01;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	8b b9       	out	0x0b, r24	; 11
			break;
 226:	08 95       	ret
		case down:
			PORTD = 0x02;
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	8b b9       	out	0x0b, r24	; 11
			break;
 22c:	08 95       	ret
		case left:
			PORTD = 0x04;
 22e:	84 e0       	ldi	r24, 0x04	; 4
 230:	8b b9       	out	0x0b, r24	; 11
			break;
 232:	08 95       	ret
		case right:
			PORTD = 0x08;
 234:	88 e0       	ldi	r24, 0x08	; 8
 236:	8b b9       	out	0x0b, r24	; 11
 238:	08 95       	ret

0000023a <main>:
			break;
	}
};

int main(void) {
	DDRC = 0xFB; PORTC = 0x04;
 23a:	8b ef       	ldi	r24, 0xFB	; 251
 23c:	87 b9       	out	0x07, r24	; 7
 23e:	84 e0       	ldi	r24, 0x04	; 4
 240:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	8a b9       	out	0x0a, r24	; 10
 246:	1b b8       	out	0x0b, r1	; 11
	state = start;
 248:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
	while(1) {
		readSNES();
 24c:	3d df       	rcall	.-390    	; 0xc8 <readSNES>
		tick();
 24e:	a7 df       	rcall	.-178    	; 0x19e <tick>
 250:	fd cf       	rjmp	.-6      	; 0x24c <main+0x12>

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
